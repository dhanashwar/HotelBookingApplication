{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\n\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    defaultColorScheme = 'light'\n  } = theme,\n        otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n\n  const {\n    [defaultColorScheme]: light\n  } = colorSchemes,\n        otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n\n  Object.entries(otherColorSchemes || {}).forEach(_ref => {\n    let [key, scheme] = _ref;\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n\n  const generateCssVars = colorScheme => {\n    var _parserConfig$getSele2;\n\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n\n      const css = _extends({}, rootCss);\n\n      return {\n        css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, css)) || ':root'\n      };\n    }\n\n    const css = _extends({}, colorSchemesMap[colorScheme].css);\n\n    return {\n      css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\n\nexport default prepareCssVars;","map":{"version":3,"sources":["C:/Users/daksh/Desktop/Booking/admin/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"names":["_extends","_toPropertyKey","_objectWithoutPropertiesLoose","_excluded","deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","colorSchemes","defaultColorScheme","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","map","Object","entries","forEach","key","scheme","generateCssVars","colorScheme","_parserConfig$getSele2","_parserConfig$getSele","selector","getSelector","call"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n      colorSchemes = {},\n      defaultColorScheme = 'light'\n    } = theme,\n    otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n      [defaultColorScheme]: light\n    } = colorSchemes,\n    otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    var _parserConfig$getSele2;\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n      const css = _extends({}, rootCss);\n      return {\n        css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, css)) || ':root'\n      };\n    }\n    const css = _extends({}, colorSchemesMap[colorScheme].css);\n    return {\n      css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;"]},"metadata":{},"sourceType":"module"}