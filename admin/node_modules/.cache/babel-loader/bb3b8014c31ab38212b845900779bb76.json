{"ast":null,"code":"'use client';\n/* eslint-disable no-constant-condition */\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils'; // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\n\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\n\nexport function createFilterOptions() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, _ref) => {\n    let {\n      inputValue,\n      getOptionLabel\n    } = _ref;\n    let input = trim ? inputValue.trim() : inputValue;\n\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n} // To replace with .findIndex() once we stop IE11 support.\n\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nconst defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\n\nconst pageSize = 5;\n\nconst defaultIsActiveElementInListbox = listboxRef => {\n  var _listboxRef$current$p;\n\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\n\nexport function useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n\n      return String(optionLabel);\n    }\n\n    return optionLabel;\n  };\n\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n\n    let newInputValue;\n\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n\n    if (inputValue === newInputValue) {\n      return;\n    }\n\n    setInputValueState(newInputValue);\n\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n\n    return true;\n  }), // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n\n    if (focused && !valueChange) {\n      return;\n    } // Only reset the input's value when freeSolo if the component's value changes.\n\n\n    if (freeSolo && !valueChange) {\n      return;\n    }\n\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  }); // Ensure the focusedTag is never inconsistent\n\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      } // The next option is disabled, move to the next element.\n      // with looped index\n\n\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      } // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n\n\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n\n  const setHighlightedIndex = useEventCallback(_ref2 => {\n    let {\n      event,\n      index,\n      reason = 'auto'\n    } = _ref2;\n    highlightedIndexRef.current = index; // does the index exist?\n\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n\n    if (!listboxRef.current) {\n      return;\n    }\n\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    let listboxNode = listboxRef.current;\n\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    } // \"No results\"\n\n\n    if (!listboxNode) {\n      return;\n    }\n\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n\n    if (!option) {\n      return;\n    }\n\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    } // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n\n\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(_ref3 => {\n    let {\n      event,\n      diff,\n      direction = 'next',\n      reason = 'auto'\n    } = _ref3;\n\n    if (!popupOpen) {\n      return;\n    }\n\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n\n      if (diff === 'start') {\n        return 0;\n      }\n\n      if (diff === 'end') {\n        return maxIndex;\n      }\n\n      const newIndex = highlightedIndexRef.current + diff;\n\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n\n        return maxIndex;\n      }\n\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n\n        return 0;\n      }\n\n      return newIndex;\n    };\n\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    }); // Sync the content of the input with the highlighted option.\n\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n\n      if (previousHighlightedOption) {\n        return findIndex(filteredOptions, option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n\n    return -1;\n  };\n\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    } // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n\n\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n\n    const valueItem = multiple ? value[0] : value; // The popup is empty, reset\n\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n\n    if (!listboxRef.current) {\n      return;\n    } // Synchronize the value with the highlighted index\n\n\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible\n\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n\n      return;\n    } // Prevent the highlighted index to leak outside the boundaries.\n\n\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    } // Restore the focus to the previous index.\n\n\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [// Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length, // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n\n    if (!node) {\n      return;\n    }\n\n    syncHighlightedIndex();\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n\n    setOpenState(true);\n    setInputPristine(true);\n\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n\n    setOpenState(false);\n\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n\n    setValueState(newValue);\n  };\n\n  const isTouch = React.useRef(false);\n\n  const selectNewValue = function (event, option) {\n    let reasonProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'selectOption';\n    let origin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'options';\n    let reason = reasonProp;\n    let newValue = option;\n\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n\n    let nextTag = focusedTag;\n\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    } // Wait until IME is settled.\n\n\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.\n\n            event.preventDefault();\n\n            if (disabled) {\n              return;\n            }\n\n            selectNewValue(event, option, 'selectOption'); // Move the selection to the end.\n\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n\n          break;\n\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClear(event);\n          }\n\n          break;\n\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n\n          break;\n\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n\n          break;\n\n        default:\n      }\n    }\n  };\n\n  const handleFocus = event => {\n    setFocused(true);\n\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n\n    handleClose(event, 'blur');\n  };\n\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  }; // Prevent input blur when interacting with the combobox\n\n\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  }; // Focus the input when interacting with the combobox\n\n\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    inputRef.current.focus();\n\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n\n    firstFocus.current = false;\n  };\n\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n\n          indexBy.set(group, true);\n        }\n\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n\n      return acc;\n    }, []);\n  }\n\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n\n  return {\n    getRootProps: function () {\n      let other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        'aria-owns': listboxAvailable ? `${id}-listbox` : null\n      }, other, {\n        onKeyDown: handleKeyDown(other),\n        onMouseDown: handleMouseDown,\n        onClick: handleClick\n      });\n    },\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: _ref4 => {\n      let {\n        index\n      } = _ref4;\n      return _extends({\n        key: index,\n        'data-tag-index': index,\n        tabIndex: -1\n      }, !readOnly && {\n        onDelete: handleTagDelete(index)\n      });\n    },\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: _ref5 => {\n      let {\n        index,\n        option\n      } = _ref5;\n\n      var _getOptionKey;\n\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}","map":{"version":3,"sources":["C:/Users/daksh/Desktop/Booking/admin/node_modules/@mui/base/useAutocomplete/useAutocomplete.js"],"names":["_extends","React","unstable_setRef","setRef","unstable_useEventCallback","useEventCallback","unstable_useControlled","useControlled","unstable_useId","useId","usePreviousProps","stripDiacritics","string","normalize","replace","createFilterOptions","config","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","options","inputValue","getOptionLabel","input","toLowerCase","filteredOptions","filter","option","candidate","indexOf","slice","findIndex","array","comp","i","length","defaultFilterOptions","pageSize","defaultIsActiveElementInListbox","listboxRef","_listboxRef$current$p","current","parentElement","contains","document","activeElement","useAutocomplete","props","unstable_isActiveElementInListbox","unstable_classNamePrefix","autoComplete","autoHighlight","autoSelect","blurOnSelect","clearOnBlur","freeSolo","clearOnEscape","componentName","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledProp","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","getOptionDisabled","getOptionKey","getOptionLabelProp","_option$label","label","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValueProp","isOptionEqualToValue","value","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openProp","openOnFocus","readOnly","selectOnFocus","valueProp","optionLabel","process","env","NODE_ENV","erroneousReturn","undefined","console","error","JSON","String","ignoreFocus","useRef","firstFocus","inputRef","anchorEl","setAnchorEl","useState","focusedTag","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","controlled","default","name","setInputValueState","state","focused","setFocused","resetInputValue","useCallback","event","newValue","isOptionSelected","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","popupOpen","some","value2","previousProps","useEffect","valueChange","listboxAvailable","missingValue","warn","join","focusTag","tagToFocus","focus","querySelector","validOptionIndex","index","direction","nextFocus","nextFocusDisabled","getAttribute","hasAttribute","setHighlightedIndex","reason","removeAttribute","setAttribute","prev","classList","remove","listboxNode","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","getNextIndex","maxIndex","newIndex","Math","abs","nextIndex","setSelectionRange","getPreviousHighlightedOptionIndex","isSameValue","value1","label1","label2","every","val","previousHighlightedOption","syncHighlightedIndex","previousHighlightedOptionIndex","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","nodeName","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","reasonProp","origin","Array","isArray","matches","push","splice","ctrlKey","metaKey","blur","validTagIndex","handleFocusTag","nextTag","handleClear","handleKeyDown","other","onKeyDown","defaultMuiPrevented","key","which","preventDefault","stopPropagation","handleFocus","handleBlur","handleInputChange","target","handleOptionMouseMove","Number","currentTarget","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","handleInputMouseDown","dirty","groupedOptions","indexBy","Map","reduce","acc","group","get","set","getRootProps","onMouseDown","onClick","getInputLabelProps","htmlFor","getInputProps","onBlur","onFocus","ref","autoCapitalize","spellCheck","role","getClearProps","tabIndex","type","getPopupIndicatorProps","getTagProps","onDelete","getListboxProps","getOptionProps","_getOptionKey","selected","onMouseMove","onTouchStart","expanded"],"mappings":"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","sourcesContent":["'use client';\n\n/* eslint-disable no-constant-condition */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\n\n// To replace with .findIndex() once we stop IE11 support.\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nexport function useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return findIndex(filteredOptions, option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => _extends({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => _extends({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1\n    }, !readOnly && {\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      var _getOptionKey;\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}"]},"metadata":{},"sourceType":"module"}