{"ast":null,"code":"var getOwnPropertyNames = Object.getOwnPropertyNames,\n    getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Combine two comparators into a single comparators.\n */\n\nfunction combineComparators(comparatorA, comparatorB) {\n  return function isEqual(a, b, state) {\n    return comparatorA(a, b, state) && comparatorB(a, b, state);\n  };\n}\n/**\n * Wrap the provided `areItemsEqual` method to manage the circular state, allowing\n * for circular references to be safely included in the comparison without creating\n * stack overflows.\n */\n\n\nfunction createIsCircular(areItemsEqual) {\n  return function isCircular(a, b, state) {\n    if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n      return areItemsEqual(a, b, state);\n    }\n\n    var cache = state.cache;\n    var cachedA = cache.get(a);\n    var cachedB = cache.get(b);\n\n    if (cachedA && cachedB) {\n      return cachedA === b && cachedB === a;\n    }\n\n    cache.set(a, b);\n    cache.set(b, a);\n    var result = areItemsEqual(a, b, state);\n    cache.delete(a);\n    cache.delete(b);\n    return result;\n  };\n}\n/**\n * Get the properties to strictly examine, which include both own properties that are\n * not enumerable and symbol properties.\n */\n\n\nfunction getStrictProperties(object) {\n  return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));\n}\n/**\n * Whether the object contains the property passed as an own property.\n */\n\n\nvar hasOwn = Object.hasOwn || function (object, property) {\n  return hasOwnProperty.call(object, property);\n};\n/**\n * Whether the values passed are strictly equal or both NaN.\n */\n\n\nfunction sameValueZeroEqual(a, b) {\n  return a || b ? a === b : a === b || a !== a && b !== b;\n}\n\nvar OWNER = '_owner';\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,\n    keys = Object.keys;\n/**\n * Whether the arrays are equal in value.\n */\n\nfunction areArraysEqual(a, b, state) {\n  var index = a.length;\n\n  if (b.length !== index) {\n    return false;\n  }\n\n  while (index-- > 0) {\n    if (!state.equals(a[index], b[index], index, index, a, b, state)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Whether the dates passed are equal in value.\n */\n\n\nfunction areDatesEqual(a, b) {\n  return sameValueZeroEqual(a.getTime(), b.getTime());\n}\n/**\n * Whether the `Map`s are equal in value.\n */\n\n\nfunction areMapsEqual(a, b, state) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  var matchedIndices = {};\n  var aIterable = a.entries();\n  var index = 0;\n  var aResult;\n  var bResult;\n\n  while (aResult = aIterable.next()) {\n    if (aResult.done) {\n      break;\n    }\n\n    var bIterable = b.entries();\n    var hasMatch = false;\n    var matchIndex = 0;\n\n    while (bResult = bIterable.next()) {\n      if (bResult.done) {\n        break;\n      }\n\n      var _a = aResult.value,\n          aKey = _a[0],\n          aValue = _a[1];\n      var _b = bResult.value,\n          bKey = _b[0],\n          bValue = _b[1];\n\n      if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = state.equals(aKey, bKey, index, matchIndex, a, b, state) && state.equals(aValue, bValue, aKey, bKey, a, b, state))) {\n        matchedIndices[matchIndex] = true;\n      }\n\n      matchIndex++;\n    }\n\n    if (!hasMatch) {\n      return false;\n    }\n\n    index++;\n  }\n\n  return true;\n}\n/**\n * Whether the objects are equal in value.\n */\n\n\nfunction areObjectsEqual(a, b, state) {\n  var properties = keys(a);\n  var index = properties.length;\n\n  if (keys(b).length !== index) {\n    return false;\n  }\n\n  var property; // Decrementing `while` showed faster results than either incrementing or\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\n  // methods like `some` / `every` were not used to avoid incurring the garbage\n  // cost of anonymous callbacks.\n\n  while (index-- > 0) {\n    property = properties[index];\n\n    if (property === OWNER && (a.$$typeof || b.$$typeof) && a.$$typeof !== b.$$typeof) {\n      return false;\n    }\n\n    if (!hasOwn(b, property) || !state.equals(a[property], b[property], property, property, a, b, state)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Whether the objects are equal in value with strict property checking.\n */\n\n\nfunction areObjectsEqualStrict(a, b, state) {\n  var properties = getStrictProperties(a);\n  var index = properties.length;\n\n  if (getStrictProperties(b).length !== index) {\n    return false;\n  }\n\n  var property;\n  var descriptorA;\n  var descriptorB; // Decrementing `while` showed faster results than either incrementing or\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\n  // methods like `some` / `every` were not used to avoid incurring the garbage\n  // cost of anonymous callbacks.\n\n  while (index-- > 0) {\n    property = properties[index];\n\n    if (property === OWNER && (a.$$typeof || b.$$typeof) && a.$$typeof !== b.$$typeof) {\n      return false;\n    }\n\n    if (!hasOwn(b, property)) {\n      return false;\n    }\n\n    if (!state.equals(a[property], b[property], property, property, a, b, state)) {\n      return false;\n    }\n\n    descriptorA = getOwnPropertyDescriptor(a, property);\n    descriptorB = getOwnPropertyDescriptor(b, property);\n\n    if ((descriptorA || descriptorB) && (!descriptorA || !descriptorB || descriptorA.configurable !== descriptorB.configurable || descriptorA.enumerable !== descriptorB.enumerable || descriptorA.writable !== descriptorB.writable)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Whether the primitive wrappers passed are equal in value.\n */\n\n\nfunction arePrimitiveWrappersEqual(a, b) {\n  return sameValueZeroEqual(a.valueOf(), b.valueOf());\n}\n/**\n * Whether the regexps passed are equal in value.\n */\n\n\nfunction areRegExpsEqual(a, b) {\n  return a.source === b.source && a.flags === b.flags;\n}\n/**\n * Whether the `Set`s are equal in value.\n */\n\n\nfunction areSetsEqual(a, b, state) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  var matchedIndices = {};\n  var aIterable = a.values();\n  var aResult;\n  var bResult;\n\n  while (aResult = aIterable.next()) {\n    if (aResult.done) {\n      break;\n    }\n\n    var bIterable = b.values();\n    var hasMatch = false;\n    var matchIndex = 0;\n\n    while (bResult = bIterable.next()) {\n      if (bResult.done) {\n        break;\n      }\n\n      if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = state.equals(aResult.value, bResult.value, aResult.value, bResult.value, a, b, state))) {\n        matchedIndices[matchIndex] = true;\n      }\n\n      matchIndex++;\n    }\n\n    if (!hasMatch) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Whether the TypedArray instances are equal in value.\n */\n\n\nfunction areTypedArraysEqual(a, b) {\n  var index = a.length;\n\n  if (b.length !== index) {\n    return false;\n  }\n\n  while (index-- > 0) {\n    if (a[index] !== b[index]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nvar ARGUMENTS_TAG = '[object Arguments]';\nvar BOOLEAN_TAG = '[object Boolean]';\nvar DATE_TAG = '[object Date]';\nvar MAP_TAG = '[object Map]';\nvar NUMBER_TAG = '[object Number]';\nvar OBJECT_TAG = '[object Object]';\nvar REG_EXP_TAG = '[object RegExp]';\nvar SET_TAG = '[object Set]';\nvar STRING_TAG = '[object String]';\nvar isArray = Array.isArray;\nvar isTypedArray = typeof ArrayBuffer === 'function' && ArrayBuffer.isView ? ArrayBuffer.isView : null;\nvar assign = Object.assign;\nvar getTag = Object.prototype.toString.call.bind(Object.prototype.toString);\n/**\n * Create a comparator method based on the type-specific equality comparators passed.\n */\n\nfunction createEqualityComparator(_a) {\n  var areArraysEqual = _a.areArraysEqual,\n      areDatesEqual = _a.areDatesEqual,\n      areMapsEqual = _a.areMapsEqual,\n      areObjectsEqual = _a.areObjectsEqual,\n      arePrimitiveWrappersEqual = _a.arePrimitiveWrappersEqual,\n      areRegExpsEqual = _a.areRegExpsEqual,\n      areSetsEqual = _a.areSetsEqual,\n      areTypedArraysEqual = _a.areTypedArraysEqual;\n  /**\n   * compare the value of the two objects and return true if they are equivalent in values\n   */\n\n  return function comparator(a, b, state) {\n    // If the items are strictly equal, no need to do a value comparison.\n    if (a === b) {\n      return true;\n    } // If the items are not non-nullish objects, then the only possibility\n    // of them being equal but not strictly is if they are both `NaN`. Since\n    // `NaN` is uniquely not equal to itself, we can use self-comparison of\n    // both objects, which is faster than `isNaN()`.\n\n\n    if (a == null || b == null || typeof a !== 'object' || typeof b !== 'object') {\n      return a !== a && b !== b;\n    }\n\n    var constructor = a.constructor; // Checks are listed in order of commonality of use-case:\n    //   1. Common complex object types (plain object, array)\n    //   2. Common data values (date, regexp)\n    //   3. Less-common complex object types (map, set)\n    //   4. Less-common data values (promise, primitive wrappers)\n    // Inherently this is both subjective and assumptive, however\n    // when reviewing comparable libraries in the wild this order\n    // appears to be generally consistent.\n    // Constructors should match, otherwise there is potential for false positives\n    // between class and subclass or custom object and POJO.\n\n    if (constructor !== b.constructor) {\n      return false;\n    } // `isPlainObject` only checks against the object's own realm. Cross-realm\n    // comparisons are rare, and will be handled in the ultimate fallback, so\n    // we can avoid capturing the string tag.\n\n\n    if (constructor === Object) {\n      return areObjectsEqual(a, b, state);\n    } // `isArray()` works on subclasses and is cross-realm, so we can avoid capturing\n    // the string tag or doing an `instanceof` check.\n\n\n    if (isArray(a)) {\n      return areArraysEqual(a, b, state);\n    } // `isTypedArray()` works on all possible TypedArray classes, so we can avoid\n    // capturing the string tag or comparing against all possible constructors.\n\n\n    if (isTypedArray != null && isTypedArray(a)) {\n      return areTypedArraysEqual(a, b, state);\n    } // Try to fast-path equality checks for other complex object types in the\n    // same realm to avoid capturing the string tag. Strict equality is used\n    // instead of `instanceof` because it is more performant for the common\n    // use-case. If someone is subclassing a native class, it will be handled\n    // with the string tag comparison.\n\n\n    if (constructor === Date) {\n      return areDatesEqual(a, b, state);\n    }\n\n    if (constructor === RegExp) {\n      return areRegExpsEqual(a, b, state);\n    }\n\n    if (constructor === Map) {\n      return areMapsEqual(a, b, state);\n    }\n\n    if (constructor === Set) {\n      return areSetsEqual(a, b, state);\n    } // Since this is a custom object, capture the string tag to determing its type.\n    // This is reasonably performant in modern environments like v8 and SpiderMonkey.\n\n\n    var tag = getTag(a);\n\n    if (tag === DATE_TAG) {\n      return areDatesEqual(a, b, state);\n    }\n\n    if (tag === REG_EXP_TAG) {\n      return areRegExpsEqual(a, b, state);\n    }\n\n    if (tag === MAP_TAG) {\n      return areMapsEqual(a, b, state);\n    }\n\n    if (tag === SET_TAG) {\n      return areSetsEqual(a, b, state);\n    }\n\n    if (tag === OBJECT_TAG) {\n      // The exception for value comparison is custom `Promise`-like class instances. These should\n      // be treated the same as standard `Promise` objects, which means strict equality, and if\n      // it reaches this point then that strict equality comparison has already failed.\n      return typeof a.then !== 'function' && typeof b.then !== 'function' && areObjectsEqual(a, b, state);\n    } // If an arguments tag, it should be treated as a standard object.\n\n\n    if (tag === ARGUMENTS_TAG) {\n      return areObjectsEqual(a, b, state);\n    } // As the penultimate fallback, check if the values passed are primitive wrappers. This\n    // is very rare in modern JS, which is why it is deprioritized compared to all other object\n    // types.\n\n\n    if (tag === BOOLEAN_TAG || tag === NUMBER_TAG || tag === STRING_TAG) {\n      return arePrimitiveWrappersEqual(a, b, state);\n    } // If not matching any tags that require a specific type of comparison, then we hard-code false because\n    // the only thing remaining is strict equality, which has already been compared. This is for a few reasons:\n    //   - Certain types that cannot be introspected (e.g., `WeakMap`). For these types, this is the only\n    //     comparison that can be made.\n    //   - For types that can be introspected, but rarely have requirements to be compared\n    //     (`ArrayBuffer`, `DataView`, etc.), the cost is avoided to prioritize the common\n    //     use-cases (may be included in a future release, if requested enough).\n    //   - For types that can be introspected but do not have an objective definition of what\n    //     equality is (`Error`, etc.), the subjective decision is to be conservative and strictly compare.\n    // In all cases, these decisions should be reevaluated based on changes to the language and\n    // common development practices.\n\n\n    return false;\n  };\n}\n/**\n * Create the configuration object used for building comparators.\n */\n\n\nfunction createEqualityComparatorConfig(_a) {\n  var circular = _a.circular,\n      createCustomConfig = _a.createCustomConfig,\n      strict = _a.strict;\n  var config = {\n    areArraysEqual: strict ? areObjectsEqualStrict : areArraysEqual,\n    areDatesEqual: areDatesEqual,\n    areMapsEqual: strict ? combineComparators(areMapsEqual, areObjectsEqualStrict) : areMapsEqual,\n    areObjectsEqual: strict ? areObjectsEqualStrict : areObjectsEqual,\n    arePrimitiveWrappersEqual: arePrimitiveWrappersEqual,\n    areRegExpsEqual: areRegExpsEqual,\n    areSetsEqual: strict ? combineComparators(areSetsEqual, areObjectsEqualStrict) : areSetsEqual,\n    areTypedArraysEqual: strict ? areObjectsEqualStrict : areTypedArraysEqual\n  };\n\n  if (createCustomConfig) {\n    config = assign({}, config, createCustomConfig(config));\n  }\n\n  if (circular) {\n    var areArraysEqual$1 = createIsCircular(config.areArraysEqual);\n    var areMapsEqual$1 = createIsCircular(config.areMapsEqual);\n    var areObjectsEqual$1 = createIsCircular(config.areObjectsEqual);\n    var areSetsEqual$1 = createIsCircular(config.areSetsEqual);\n    config = assign({}, config, {\n      areArraysEqual: areArraysEqual$1,\n      areMapsEqual: areMapsEqual$1,\n      areObjectsEqual: areObjectsEqual$1,\n      areSetsEqual: areSetsEqual$1\n    });\n  }\n\n  return config;\n}\n/**\n * Default equality comparator pass-through, used as the standard `isEqual` creator for\n * use inside the built comparator.\n */\n\n\nfunction createInternalEqualityComparator(compare) {\n  return function (a, b, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, state) {\n    return compare(a, b, state);\n  };\n}\n/**\n * Create the `isEqual` function used by the consuming application.\n */\n\n\nfunction createIsEqual(_a) {\n  var circular = _a.circular,\n      comparator = _a.comparator,\n      createState = _a.createState,\n      equals = _a.equals,\n      strict = _a.strict;\n\n  if (createState) {\n    return function isEqual(a, b) {\n      var _a = createState(),\n          _b = _a.cache,\n          cache = _b === void 0 ? circular ? new WeakMap() : undefined : _b,\n          meta = _a.meta;\n\n      return comparator(a, b, {\n        cache: cache,\n        equals: equals,\n        meta: meta,\n        strict: strict\n      });\n    };\n  }\n\n  if (circular) {\n    return function isEqual(a, b) {\n      return comparator(a, b, {\n        cache: new WeakMap(),\n        equals: equals,\n        meta: undefined,\n        strict: strict\n      });\n    };\n  }\n\n  var state = {\n    cache: undefined,\n    equals: equals,\n    meta: undefined,\n    strict: strict\n  };\n  return function isEqual(a, b) {\n    return comparator(a, b, state);\n  };\n}\n/**\n * Whether the items passed are deeply-equal in value.\n */\n\n\nvar deepEqual = createCustomEqual();\n/**\n * Whether the items passed are deeply-equal in value based on strict comparison.\n */\n\nvar strictDeepEqual = createCustomEqual({\n  strict: true\n});\n/**\n * Whether the items passed are deeply-equal in value, including circular references.\n */\n\nvar circularDeepEqual = createCustomEqual({\n  circular: true\n});\n/**\n * Whether the items passed are deeply-equal in value, including circular references,\n * based on strict comparison.\n */\n\nvar strictCircularDeepEqual = createCustomEqual({\n  circular: true,\n  strict: true\n});\n/**\n * Whether the items passed are shallowly-equal in value.\n */\n\nvar shallowEqual = createCustomEqual({\n  createInternalComparator: function () {\n    return sameValueZeroEqual;\n  }\n});\n/**\n * Whether the items passed are shallowly-equal in value based on strict comparison\n */\n\nvar strictShallowEqual = createCustomEqual({\n  strict: true,\n  createInternalComparator: function () {\n    return sameValueZeroEqual;\n  }\n});\n/**\n * Whether the items passed are shallowly-equal in value, including circular references.\n */\n\nvar circularShallowEqual = createCustomEqual({\n  circular: true,\n  createInternalComparator: function () {\n    return sameValueZeroEqual;\n  }\n});\n/**\n * Whether the items passed are shallowly-equal in value, including circular references,\n * based on strict comparison.\n */\n\nvar strictCircularShallowEqual = createCustomEqual({\n  circular: true,\n  createInternalComparator: function () {\n    return sameValueZeroEqual;\n  },\n  strict: true\n});\n/**\n * Create a custom equality comparison method.\n *\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\n * where the standard methods are not performant enough, but can also be used to provide\n * support for legacy environments that do not support expected features like\n * `RegExp.prototype.flags` out of the box.\n */\n\nfunction createCustomEqual(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.circular,\n      circular = _a === void 0 ? false : _a,\n      createCustomInternalComparator = options.createInternalComparator,\n      createState = options.createState,\n      _b = options.strict,\n      strict = _b === void 0 ? false : _b;\n  var config = createEqualityComparatorConfig(options);\n  var comparator = createEqualityComparator(config);\n  var equals = createCustomInternalComparator ? createCustomInternalComparator(comparator) : createInternalEqualityComparator(comparator);\n  return createIsEqual({\n    circular: circular,\n    comparator: comparator,\n    createState: createState,\n    equals: equals,\n    strict: strict\n  });\n}\n\nexport { circularDeepEqual, circularShallowEqual, createCustomEqual, deepEqual, sameValueZeroEqual, shallowEqual, strictCircularDeepEqual, strictCircularShallowEqual, strictDeepEqual, strictShallowEqual };","map":{"version":3,"mappings":"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","names":["Object","getOwnPropertySymbols","prototype","hasOwnProperty","comparatorA","comparatorB","isEqual","a","b","state","createIsCircular","areItemsEqual","isCircular","cachedA","cache","get","cachedB","set","result","delete","getStrictProperties","object","getOwnPropertyNames","concat","hasOwn","property","call","OWNER","keys","areArraysEqual","index","length","equals","sameValueZeroEqual","getTime","areMapsEqual","size","matchedIndices","aIterable","entries","aResult","bResult","next","done","bIterable","hasMatch","matchIndex","value","aKey","aValue","bKey","bValue","areObjectsEqual","properties","$$typeof","areObjectsEqualStrict","descriptorA","descriptorB","getOwnPropertyDescriptor","configurable","enumerable","writable","valueOf","source","flags","areSetsEqual","values","ARGUMENTS_TAG","BOOLEAN_TAG","DATE_TAG","MAP_TAG","NUMBER_TAG","OBJECT_TAG","REG_EXP_TAG","SET_TAG","STRING_TAG","Array","isTypedArray","ArrayBuffer","isView","getTag","toString","bind","createEqualityComparator","_a","areDatesEqual","arePrimitiveWrappersEqual","areRegExpsEqual","areTypedArraysEqual","comparator","constructor","isArray","Date","RegExp","Map","Set","tag","then","createEqualityComparatorConfig","createCustomConfig","strict","config","areObjectsEqualStrictDefault","areArraysEqualDefault","areDatesEqualDefault","combineComparators","areMapsEqualDefault","areObjectsEqualDefault","arePrimitiveWrappersEqualDefault","areRegExpsEqualDefault","areSetsEqualDefault","assign","circular","createInternalEqualityComparator","compare","_indexOrKeyA","_indexOrKeyB","_parentA","_parentB","createIsEqual","createState","_b","WeakMap","undefined","meta","createCustomEqual","strictDeepEqual","circularDeepEqual","strictCircularDeepEqual","shallowEqual","createInternalComparator","strictShallowEqual","circularShallowEqual","strictCircularShallowEqual","options","createCustomInternalComparator"],"sources":["C:\\Users\\daksh\\Desktop\\Booking\\admin\\node_modules\\fast-equals\\src\\utils.ts","C:\\Users\\daksh\\Desktop\\Booking\\admin\\node_modules\\fast-equals\\src\\equals.ts","C:\\Users\\daksh\\Desktop\\Booking\\admin\\node_modules\\fast-equals\\src\\comparator.ts","C:\\Users\\daksh\\Desktop\\Booking\\admin\\node_modules\\fast-equals\\src\\index.ts"],"sourcesContent":["import {\n  AnyEqualityComparator,\n  Cache,\n  CircularState,\n  Dictionary,\n  State,\n  TypeEqualityComparator,\n} from './internalTypes';\n\nconst { getOwnPropertyNames, getOwnPropertySymbols } = Object;\nconst { hasOwnProperty } = Object.prototype;\n\n/**\n * Combine two comparators into a single comparators.\n */\nexport function combineComparators<Meta>(\n  comparatorA: AnyEqualityComparator<Meta>,\n  comparatorB: AnyEqualityComparator<Meta>,\n) {\n  return function isEqual<A, B>(a: A, b: B, state: State<Meta>) {\n    return comparatorA(a, b, state) && comparatorB(a, b, state);\n  };\n}\n\n/**\n * Wrap the provided `areItemsEqual` method to manage the circular state, allowing\n * for circular references to be safely included in the comparison without creating\n * stack overflows.\n */\nexport function createIsCircular<\n  AreItemsEqual extends TypeEqualityComparator<any, any>,\n>(areItemsEqual: AreItemsEqual): AreItemsEqual {\n  return function isCircular(\n    a: any,\n    b: any,\n    state: CircularState<Cache<any, any>>,\n  ) {\n    if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n      return areItemsEqual(a, b, state);\n    }\n\n    const { cache } = state;\n\n    const cachedA = cache.get(a);\n    const cachedB = cache.get(b);\n\n    if (cachedA && cachedB) {\n      return cachedA === b && cachedB === a;\n    }\n\n    cache.set(a, b);\n    cache.set(b, a);\n\n    const result = areItemsEqual(a, b, state);\n\n    cache.delete(a);\n    cache.delete(b);\n\n    return result;\n  } as AreItemsEqual;\n}\n\n/**\n * Get the properties to strictly examine, which include both own properties that are\n * not enumerable and symbol properties.\n */\nexport function getStrictProperties(\n  object: Dictionary,\n): Array<string | symbol> {\n  return (getOwnPropertyNames(object) as Array<string | symbol>).concat(\n    getOwnPropertySymbols(object),\n  );\n}\n\n/**\n * Whether the object contains the property passed as an own property.\n */\nexport const hasOwn =\n  Object.hasOwn ||\n  ((object: Dictionary, property: number | string | symbol) =>\n    hasOwnProperty.call(object, property));\n\n/**\n * Whether the values passed are strictly equal or both NaN.\n */\nexport function sameValueZeroEqual(a: any, b: any): boolean {\n  return a || b ? a === b : a === b || (a !== a && b !== b);\n}\n","import { getStrictProperties, hasOwn, sameValueZeroEqual } from './utils';\nimport type {\n  Dictionary,\n  PrimitiveWrapper,\n  State,\n  TypedArray,\n} from './internalTypes';\n\nconst OWNER = '_owner';\n\nconst { getOwnPropertyDescriptor, keys } = Object;\n\n/**\n * Whether the arrays are equal in value.\n */\nexport function areArraysEqual(a: any[], b: any[], state: State<any>) {\n  let index = a.length;\n\n  if (b.length !== index) {\n    return false;\n  }\n\n  while (index-- > 0) {\n    if (!state.equals(a[index], b[index], index, index, a, b, state)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Whether the dates passed are equal in value.\n */\nexport function areDatesEqual(a: Date, b: Date): boolean {\n  return sameValueZeroEqual(a.getTime(), b.getTime());\n}\n\n/**\n * Whether the `Map`s are equal in value.\n */\nexport function areMapsEqual(\n  a: Map<any, any>,\n  b: Map<any, any>,\n  state: State<any>,\n): boolean {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  const matchedIndices: Record<number, true> = {};\n  const aIterable = a.entries();\n\n  let index = 0;\n  let aResult: IteratorResult<[any, any]>;\n  let bResult: IteratorResult<[any, any]>;\n\n  while ((aResult = aIterable.next())) {\n    if (aResult.done) {\n      break;\n    }\n\n    const bIterable = b.entries();\n\n    let hasMatch = false;\n    let matchIndex = 0;\n\n    while ((bResult = bIterable.next())) {\n      if (bResult.done) {\n        break;\n      }\n\n      const [aKey, aValue] = aResult.value;\n      const [bKey, bValue] = bResult.value;\n\n      if (\n        !hasMatch &&\n        !matchedIndices[matchIndex] &&\n        (hasMatch =\n          state.equals(aKey, bKey, index, matchIndex, a, b, state) &&\n          state.equals(aValue, bValue, aKey, bKey, a, b, state))\n      ) {\n        matchedIndices[matchIndex] = true;\n      }\n\n      matchIndex++;\n    }\n\n    if (!hasMatch) {\n      return false;\n    }\n\n    index++;\n  }\n\n  return true;\n}\n\n/**\n * Whether the objects are equal in value.\n */\nexport function areObjectsEqual(\n  a: Dictionary,\n  b: Dictionary,\n  state: State<any>,\n): boolean {\n  const properties = keys(a);\n\n  let index = properties.length;\n\n  if (keys(b).length !== index) {\n    return false;\n  }\n\n  let property: string;\n\n  // Decrementing `while` showed faster results than either incrementing or\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\n  // methods like `some` / `every` were not used to avoid incurring the garbage\n  // cost of anonymous callbacks.\n  while (index-- > 0) {\n    property = properties[index]!;\n\n    if (\n      property === OWNER &&\n      (a.$$typeof || b.$$typeof) &&\n      a.$$typeof !== b.$$typeof\n    ) {\n      return false;\n    }\n\n    if (\n      !hasOwn(b, property) ||\n      !state.equals(a[property], b[property], property, property, a, b, state)\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Whether the objects are equal in value with strict property checking.\n */\nexport function areObjectsEqualStrict(\n  a: Dictionary,\n  b: Dictionary,\n  state: State<any>,\n): boolean {\n  const properties = getStrictProperties(a);\n\n  let index = properties.length;\n\n  if (getStrictProperties(b).length !== index) {\n    return false;\n  }\n\n  let property: string | symbol;\n  let descriptorA: ReturnType<typeof getOwnPropertyDescriptor>;\n  let descriptorB: ReturnType<typeof getOwnPropertyDescriptor>;\n\n  // Decrementing `while` showed faster results than either incrementing or\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\n  // methods like `some` / `every` were not used to avoid incurring the garbage\n  // cost of anonymous callbacks.\n  while (index-- > 0) {\n    property = properties[index]!;\n\n    if (\n      property === OWNER &&\n      (a.$$typeof || b.$$typeof) &&\n      a.$$typeof !== b.$$typeof\n    ) {\n      return false;\n    }\n\n    if (!hasOwn(b, property)) {\n      return false;\n    }\n\n    if (\n      !state.equals(a[property], b[property], property, property, a, b, state)\n    ) {\n      return false;\n    }\n\n    descriptorA = getOwnPropertyDescriptor(a, property);\n    descriptorB = getOwnPropertyDescriptor(b, property);\n\n    if (\n      (descriptorA || descriptorB) &&\n      (!descriptorA ||\n        !descriptorB ||\n        descriptorA.configurable !== descriptorB.configurable ||\n        descriptorA.enumerable !== descriptorB.enumerable ||\n        descriptorA.writable !== descriptorB.writable)\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Whether the primitive wrappers passed are equal in value.\n */\nexport function arePrimitiveWrappersEqual(\n  a: PrimitiveWrapper,\n  b: PrimitiveWrapper,\n): boolean {\n  return sameValueZeroEqual(a.valueOf(), b.valueOf());\n}\n\n/**\n * Whether the regexps passed are equal in value.\n */\nexport function areRegExpsEqual(a: RegExp, b: RegExp): boolean {\n  return a.source === b.source && a.flags === b.flags;\n}\n\n/**\n * Whether the `Set`s are equal in value.\n */\nexport function areSetsEqual(\n  a: Set<any>,\n  b: Set<any>,\n  state: State<any>,\n): boolean {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  const matchedIndices: Record<number, true> = {};\n  const aIterable = a.values();\n\n  let aResult: IteratorResult<any>;\n  let bResult: IteratorResult<any>;\n\n  while ((aResult = aIterable.next())) {\n    if (aResult.done) {\n      break;\n    }\n\n    const bIterable = b.values();\n\n    let hasMatch = false;\n    let matchIndex = 0;\n\n    while ((bResult = bIterable.next())) {\n      if (bResult.done) {\n        break;\n      }\n\n      if (\n        !hasMatch &&\n        !matchedIndices[matchIndex] &&\n        (hasMatch = state.equals(\n          aResult.value,\n          bResult.value,\n          aResult.value,\n          bResult.value,\n          a,\n          b,\n          state,\n        ))\n      ) {\n        matchedIndices[matchIndex] = true;\n      }\n\n      matchIndex++;\n    }\n\n    if (!hasMatch) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Whether the TypedArray instances are equal in value.\n */\nexport function areTypedArraysEqual(a: TypedArray, b: TypedArray) {\n  let index = a.length;\n\n  if (b.length !== index) {\n    return false;\n  }\n\n  while (index-- > 0) {\n    if (a[index] !== b[index]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {\n  areArraysEqual as areArraysEqualDefault,\n  areDatesEqual as areDatesEqualDefault,\n  areMapsEqual as areMapsEqualDefault,\n  areObjectsEqual as areObjectsEqualDefault,\n  areObjectsEqualStrict as areObjectsEqualStrictDefault,\n  arePrimitiveWrappersEqual as arePrimitiveWrappersEqualDefault,\n  areRegExpsEqual as areRegExpsEqualDefault,\n  areSetsEqual as areSetsEqualDefault,\n  areTypedArraysEqual,\n} from './equals';\nimport { combineComparators, createIsCircular } from './utils';\nimport type {\n  ComparatorConfig,\n  CreateState,\n  CustomEqualCreatorOptions,\n  EqualityComparator,\n  InternalEqualityComparator,\n  State,\n} from './internalTypes';\n\nconst ARGUMENTS_TAG = '[object Arguments]';\nconst BOOLEAN_TAG = '[object Boolean]';\nconst DATE_TAG = '[object Date]';\nconst MAP_TAG = '[object Map]';\nconst NUMBER_TAG = '[object Number]';\nconst OBJECT_TAG = '[object Object]';\nconst REG_EXP_TAG = '[object RegExp]';\nconst SET_TAG = '[object Set]';\nconst STRING_TAG = '[object String]';\n\nconst { isArray } = Array;\nconst isTypedArray =\n  typeof ArrayBuffer === 'function' && ArrayBuffer.isView\n    ? ArrayBuffer.isView\n    : null;\nconst { assign } = Object;\nconst getTag = Object.prototype.toString.call.bind(\n  Object.prototype.toString,\n) as (a: object) => string;\n\ninterface CreateIsEqualOptions<Meta> {\n  circular: boolean;\n  comparator: EqualityComparator<Meta>;\n  createState: CreateState<Meta> | undefined;\n  equals: InternalEqualityComparator<Meta>;\n  strict: boolean;\n}\n\n/**\n * Create a comparator method based on the type-specific equality comparators passed.\n */\nexport function createEqualityComparator<Meta>({\n  areArraysEqual,\n  areDatesEqual,\n  areMapsEqual,\n  areObjectsEqual,\n  arePrimitiveWrappersEqual,\n  areRegExpsEqual,\n  areSetsEqual,\n  areTypedArraysEqual,\n}: ComparatorConfig<Meta>): EqualityComparator<Meta> {\n  /**\n   * compare the value of the two objects and return true if they are equivalent in values\n   */\n  return function comparator(a: any, b: any, state: State<Meta>): boolean {\n    // If the items are strictly equal, no need to do a value comparison.\n    if (a === b) {\n      return true;\n    }\n\n    // If the items are not non-nullish objects, then the only possibility\n    // of them being equal but not strictly is if they are both `NaN`. Since\n    // `NaN` is uniquely not equal to itself, we can use self-comparison of\n    // both objects, which is faster than `isNaN()`.\n    if (\n      a == null ||\n      b == null ||\n      typeof a !== 'object' ||\n      typeof b !== 'object'\n    ) {\n      return a !== a && b !== b;\n    }\n\n    const constructor = a.constructor;\n\n    // Checks are listed in order of commonality of use-case:\n    //   1. Common complex object types (plain object, array)\n    //   2. Common data values (date, regexp)\n    //   3. Less-common complex object types (map, set)\n    //   4. Less-common data values (promise, primitive wrappers)\n    // Inherently this is both subjective and assumptive, however\n    // when reviewing comparable libraries in the wild this order\n    // appears to be generally consistent.\n\n    // Constructors should match, otherwise there is potential for false positives\n    // between class and subclass or custom object and POJO.\n    if (constructor !== b.constructor) {\n      return false;\n    }\n\n    // `isPlainObject` only checks against the object's own realm. Cross-realm\n    // comparisons are rare, and will be handled in the ultimate fallback, so\n    // we can avoid capturing the string tag.\n    if (constructor === Object) {\n      return areObjectsEqual(a, b, state);\n    }\n\n    // `isArray()` works on subclasses and is cross-realm, so we can avoid capturing\n    // the string tag or doing an `instanceof` check.\n    if (isArray(a)) {\n      return areArraysEqual(a, b, state);\n    }\n\n    // `isTypedArray()` works on all possible TypedArray classes, so we can avoid\n    // capturing the string tag or comparing against all possible constructors.\n    if (isTypedArray != null && isTypedArray(a)) {\n      return areTypedArraysEqual(a, b, state);\n    }\n\n    // Try to fast-path equality checks for other complex object types in the\n    // same realm to avoid capturing the string tag. Strict equality is used\n    // instead of `instanceof` because it is more performant for the common\n    // use-case. If someone is subclassing a native class, it will be handled\n    // with the string tag comparison.\n\n    if (constructor === Date) {\n      return areDatesEqual(a, b, state);\n    }\n\n    if (constructor === RegExp) {\n      return areRegExpsEqual(a, b, state);\n    }\n\n    if (constructor === Map) {\n      return areMapsEqual(a, b, state);\n    }\n\n    if (constructor === Set) {\n      return areSetsEqual(a, b, state);\n    }\n\n    // Since this is a custom object, capture the string tag to determing its type.\n    // This is reasonably performant in modern environments like v8 and SpiderMonkey.\n    const tag = getTag(a);\n\n    if (tag === DATE_TAG) {\n      return areDatesEqual(a, b, state);\n    }\n\n    if (tag === REG_EXP_TAG) {\n      return areRegExpsEqual(a, b, state);\n    }\n\n    if (tag === MAP_TAG) {\n      return areMapsEqual(a, b, state);\n    }\n\n    if (tag === SET_TAG) {\n      return areSetsEqual(a, b, state);\n    }\n\n    if (tag === OBJECT_TAG) {\n      // The exception for value comparison is custom `Promise`-like class instances. These should\n      // be treated the same as standard `Promise` objects, which means strict equality, and if\n      // it reaches this point then that strict equality comparison has already failed.\n      return (\n        typeof a.then !== 'function' &&\n        typeof b.then !== 'function' &&\n        areObjectsEqual(a, b, state)\n      );\n    }\n\n    // If an arguments tag, it should be treated as a standard object.\n    if (tag === ARGUMENTS_TAG) {\n      return areObjectsEqual(a, b, state);\n    }\n\n    // As the penultimate fallback, check if the values passed are primitive wrappers. This\n    // is very rare in modern JS, which is why it is deprioritized compared to all other object\n    // types.\n    if (tag === BOOLEAN_TAG || tag === NUMBER_TAG || tag === STRING_TAG) {\n      return arePrimitiveWrappersEqual(a, b, state);\n    }\n\n    // If not matching any tags that require a specific type of comparison, then we hard-code false because\n    // the only thing remaining is strict equality, which has already been compared. This is for a few reasons:\n    //   - Certain types that cannot be introspected (e.g., `WeakMap`). For these types, this is the only\n    //     comparison that can be made.\n    //   - For types that can be introspected, but rarely have requirements to be compared\n    //     (`ArrayBuffer`, `DataView`, etc.), the cost is avoided to prioritize the common\n    //     use-cases (may be included in a future release, if requested enough).\n    //   - For types that can be introspected but do not have an objective definition of what\n    //     equality is (`Error`, etc.), the subjective decision is to be conservative and strictly compare.\n    // In all cases, these decisions should be reevaluated based on changes to the language and\n    // common development practices.\n    return false;\n  };\n}\n\n/**\n * Create the configuration object used for building comparators.\n */\nexport function createEqualityComparatorConfig<Meta>({\n  circular,\n  createCustomConfig,\n  strict,\n}: CustomEqualCreatorOptions<Meta>): ComparatorConfig<Meta> {\n  let config = {\n    areArraysEqual: strict\n      ? areObjectsEqualStrictDefault\n      : areArraysEqualDefault,\n    areDatesEqual: areDatesEqualDefault,\n    areMapsEqual: strict\n      ? combineComparators(areMapsEqualDefault, areObjectsEqualStrictDefault)\n      : areMapsEqualDefault,\n    areObjectsEqual: strict\n      ? areObjectsEqualStrictDefault\n      : areObjectsEqualDefault,\n    arePrimitiveWrappersEqual: arePrimitiveWrappersEqualDefault,\n    areRegExpsEqual: areRegExpsEqualDefault,\n    areSetsEqual: strict\n      ? combineComparators(areSetsEqualDefault, areObjectsEqualStrictDefault)\n      : areSetsEqualDefault,\n    areTypedArraysEqual: strict\n      ? areObjectsEqualStrictDefault\n      : areTypedArraysEqual,\n  };\n\n  if (createCustomConfig) {\n    config = assign({}, config, createCustomConfig(config));\n  }\n\n  if (circular) {\n    const areArraysEqual = createIsCircular(config.areArraysEqual);\n    const areMapsEqual = createIsCircular(config.areMapsEqual);\n    const areObjectsEqual = createIsCircular(config.areObjectsEqual);\n    const areSetsEqual = createIsCircular(config.areSetsEqual);\n\n    config = assign({}, config, {\n      areArraysEqual,\n      areMapsEqual,\n      areObjectsEqual,\n      areSetsEqual,\n    });\n  }\n\n  return config;\n}\n\n/**\n * Default equality comparator pass-through, used as the standard `isEqual` creator for\n * use inside the built comparator.\n */\nexport function createInternalEqualityComparator<Meta>(\n  compare: EqualityComparator<Meta>,\n): InternalEqualityComparator<Meta> {\n  return function (\n    a: any,\n    b: any,\n    _indexOrKeyA: any,\n    _indexOrKeyB: any,\n    _parentA: any,\n    _parentB: any,\n    state: State<Meta>,\n  ) {\n    return compare(a, b, state);\n  };\n}\n\n/**\n * Create the `isEqual` function used by the consuming application.\n */\nexport function createIsEqual<Meta>({\n  circular,\n  comparator,\n  createState,\n  equals,\n  strict,\n}: CreateIsEqualOptions<Meta>) {\n  if (createState) {\n    return function isEqual<A, B>(a: A, b: B): boolean {\n      const { cache = circular ? new WeakMap() : undefined, meta } =\n        createState!();\n\n      return comparator(a, b, {\n        cache,\n        equals,\n        meta,\n        strict,\n      } as State<Meta>);\n    };\n  }\n\n  if (circular) {\n    return function isEqual<A, B>(a: A, b: B): boolean {\n      return comparator(a, b, {\n        cache: new WeakMap(),\n        equals,\n        meta: undefined as Meta,\n        strict,\n      } as State<Meta>);\n    };\n  }\n\n  const state = {\n    cache: undefined,\n    equals,\n    meta: undefined,\n    strict,\n  } as State<Meta>;\n\n  return function isEqual<A, B>(a: A, b: B): boolean {\n    return comparator(a, b, state);\n  };\n}\n","import {\n  createEqualityComparatorConfig,\n  createEqualityComparator,\n  createInternalEqualityComparator,\n  createIsEqual,\n} from './comparator';\nimport type { CustomEqualCreatorOptions } from './internalTypes';\nimport { sameValueZeroEqual } from './utils';\n\nexport { sameValueZeroEqual };\nexport * from './internalTypes';\n\n/**\n * Whether the items passed are deeply-equal in value.\n */\nexport const deepEqual = createCustomEqual();\n\n/**\n * Whether the items passed are deeply-equal in value based on strict comparison.\n */\nexport const strictDeepEqual = createCustomEqual({ strict: true });\n\n/**\n * Whether the items passed are deeply-equal in value, including circular references.\n */\nexport const circularDeepEqual = createCustomEqual({ circular: true });\n\n/**\n * Whether the items passed are deeply-equal in value, including circular references,\n * based on strict comparison.\n */\nexport const strictCircularDeepEqual = createCustomEqual({\n  circular: true,\n  strict: true,\n});\n\n/**\n * Whether the items passed are shallowly-equal in value.\n */\nexport const shallowEqual = createCustomEqual({\n  createInternalComparator: () => sameValueZeroEqual,\n});\n\n/**\n * Whether the items passed are shallowly-equal in value based on strict comparison\n */\nexport const strictShallowEqual = createCustomEqual({\n  strict: true,\n  createInternalComparator: () => sameValueZeroEqual,\n});\n\n/**\n * Whether the items passed are shallowly-equal in value, including circular references.\n */\nexport const circularShallowEqual = createCustomEqual({\n  circular: true,\n  createInternalComparator: () => sameValueZeroEqual,\n});\n\n/**\n * Whether the items passed are shallowly-equal in value, including circular references,\n * based on strict comparison.\n */\nexport const strictCircularShallowEqual = createCustomEqual({\n  circular: true,\n  createInternalComparator: () => sameValueZeroEqual,\n  strict: true,\n});\n\n/**\n * Create a custom equality comparison method.\n *\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\n * where the standard methods are not performant enough, but can also be used to provide\n * support for legacy environments that do not support expected features like\n * `RegExp.prototype.flags` out of the box.\n */\nexport function createCustomEqual<Meta = undefined>(\n  options: CustomEqualCreatorOptions<Meta> = {},\n) {\n  const {\n    circular = false,\n    createInternalComparator: createCustomInternalComparator,\n    createState,\n    strict = false,\n  } = options;\n\n  const config = createEqualityComparatorConfig<Meta>(options);\n  const comparator = createEqualityComparator(config);\n  const equals = createCustomInternalComparator\n    ? createCustomInternalComparator(comparator)\n    : createInternalEqualityComparator(comparator);\n\n  return createIsEqual({ circular, comparator, createState, equals, strict });\n}\n"]},"metadata":{},"sourceType":"module"}