{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect, visuallyHidden as visuallyHiddenStyle } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport { ListActionTypes, useList } from '../useList';\nimport { defaultOptionStringifier } from './defaultOptionStringifier';\nimport { useCompoundParent } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { selectReducer } from './selectReducer';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n\n  return JSON.stringify(selectedOption.value);\n}\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\n\n\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp,\n    componentName = 'useSelect'\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n\n      return valueProp == null ? [] : [valueProp];\n    }\n\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null || onChange(event, newValues);\n    } else {\n      var _newValues$;\n\n      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null || onOpenChange(fieldValue);\n\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const getItemDomElement = React.useCallback(itemId => {\n    var _subitems$get$ref$cur, _subitems$get;\n\n    if (itemId == null) {\n      return null;\n    }\n\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer,\n    componentName\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters); // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n\n  const isInitiallyOpen = React.useRef(open);\n  useEnhancedEffect(() => {\n    if (open && highlightedOption !== null) {\n      var _getOptionByValue;\n\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n\n  const createHandleButtonClick = externalEventHandlers => event => {\n    var _externalEventHandler;\n\n    externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onClick) == null || _externalEventHandler.call(externalEventHandlers, event);\n\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n\n  const getButtonOwnRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onClick: createHandleButtonClick(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    };\n  };\n\n  const getSelectTriggerProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n\n  const getButtonProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const combinedProps = combineHooksSlotProps(getSelectTriggerProps, getButtonRootProps);\n    return _extends({}, externalProps, combinedProps(externalEventHandlers));\n  };\n\n  const createListboxHandleBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur, _listboxRef$current;\n\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n\n  const getOwnListboxHandlers = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onBlur: createListboxHandleBlur(otherHandlers)\n    };\n  };\n\n  const getListboxProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);\n    return _extends({\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    }, externalProps, getCombinedRootProps(externalEventHandlers));\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n\n  let selectedOptionsMetadata;\n\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    var _getOptionMetadata;\n\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;\n  }\n\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\n    var _externalEventHandler2;\n\n    externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    const option = options.get(event.target.value); // support autofill\n\n    if (event.target.value === '') {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== undefined) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n\n  const getHiddenInputProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({\n      name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\n\nexport { useSelect };","map":{"version":3,"sources":["C:/Users/daksh/Desktop/Booking/admin/node_modules/@mui/base/useSelect/useSelect.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","visuallyHidden","visuallyHiddenStyle","useButton","SelectActionTypes","ListActionTypes","useList","defaultOptionStringifier","useCompoundParent","extractEventHandlers","selectReducer","combineHooksSlotProps","defaultFormValueProvider","selectedOption","Array","isArray","length","JSON","stringify","map","o","value","useSelect","props","areOptionsEqual","buttonRef","buttonRefProp","defaultOpen","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","name","required","onChange","onHighlightChange","onOpenChange","open","openProp","options","optionsParam","getOptionAsString","getSerializedValue","valueProp","componentName","useRef","handleButtonRef","undefined","useMemo","subitems","contextValue","compoundComponentContextValue","Map","option","index","label","ref","createRef","id","handleListboxRef","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","rootRef","mergedButtonRef","optionValues","from","keys","getOptionByValue","useCallback","valueToGet","similarValue","find","optionValue","get","isItemDisabled","valueToCheck","_option$disabled","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","event","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","field","fieldValue","type","_buttonRef$current","current","focus","getItemDomElement","itemId","_subitems$get$ref$cur","_subitems$get","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","focusManagement","itemComparer","onStateChange","reducerActionContext","items","getItemAsString","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListRootRef","isInitiallyOpen","_getOptionByValue","optionRef","preventScroll","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getOptionMetadata","createHandleButtonClick","externalEventHandlers","_externalEventHandler","onClick","call","defaultMuiPrevented","action","buttonClick","createHandleButtonKeyDown","otherHandlers","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","keyDown","getButtonOwnRootProps","getSelectTriggerProps","role","getButtonProps","externalProps","combinedProps","createListboxHandleBlur","_otherHandlers$onBlur","_listboxRef$current","onBlur","contains","relatedTarget","getOwnListboxHandlers","getListboxProps","getCombinedRootProps","useDebugValue","selectValue","selectedOptionsMetadata","v","filter","_getOptionMetadata","createHandleHiddenInputChange","_externalEventHandler2","target","clearSelection","browserAutoFill","item","getHiddenInputProps","tabIndex","style"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect, visuallyHidden as visuallyHiddenStyle } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport { ListActionTypes, useList } from '../useList';\nimport { defaultOptionStringifier } from './defaultOptionStringifier';\nimport { useCompoundParent } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { selectReducer } from './selectReducer';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp,\n    componentName = 'useSelect'\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null || onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null || onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const getItemDomElement = React.useCallback(itemId => {\n    var _subitems$get$ref$cur, _subitems$get;\n    if (itemId == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer,\n    componentName\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n\n  // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n  const isInitiallyOpen = React.useRef(open);\n  useEnhancedEffect(() => {\n    if (open && highlightedOption !== null) {\n      var _getOptionByValue;\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n  const createHandleButtonClick = externalEventHandlers => event => {\n    var _externalEventHandler;\n    externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onClick) == null || _externalEventHandler.call(externalEventHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n  const getButtonOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleButtonClick(otherHandlers),\n    onKeyDown: createHandleButtonKeyDown(otherHandlers)\n  });\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const combinedProps = combineHooksSlotProps(getSelectTriggerProps, getButtonRootProps);\n    return _extends({}, externalProps, combinedProps(externalEventHandlers));\n  };\n  const createListboxHandleBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur, _listboxRef$current;\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createListboxHandleBlur(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);\n    return _extends({\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    }, externalProps, getCombinedRootProps(externalEventHandlers));\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    var _getOptionMetadata;\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;\n  }\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\n    var _externalEventHandler2;\n    externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const option = options.get(event.target.value);\n\n    // support autofill\n    if (event.target.value === '') {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== undefined) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({\n      name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport { useSelect };"]},"metadata":{},"sourceType":"module"}