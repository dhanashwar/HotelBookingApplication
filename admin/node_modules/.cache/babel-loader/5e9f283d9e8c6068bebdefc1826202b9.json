{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _ClearIcon, _ArrowDropDownIcon;\n\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionKey\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"slotProps\", \"value\"],\n      _excluded2 = [\"ref\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport integerPropType from '@mui/utils/integerPropType';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport { useAutocomplete, createFilterOptions } from '@mui/base';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport { styled, createUseThemeProps } from '../zero-styled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport useForkRef from '../utils/useForkRef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst useThemeProps = createUseThemeProps('MuiAutocomplete');\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\n\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  [`& .${autocompleteClasses.tag}`]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      [`& .${autocompleteClasses.tag}`]: {\n        margin: 2,\n        maxWidth: 'calc(100% - 4px)'\n      }\n    }\n  }, {\n    props: {\n      inputFocused: true\n    },\n    style: {\n      [`& .${autocompleteClasses.input}`]: {\n        opacity: 1\n      }\n    }\n  }]\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: '50%',\n  transform: 'translate(0, -50%)'\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (_ref, styles) => {\n    let {\n      ownerState\n    } = _ref;\n    return _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen);\n  }\n})({\n  padding: 2,\n  marginRight: -2,\n  variants: [{\n    props: {\n      popupOpen: true\n    },\n    style: {\n      transform: 'rotate(180deg)'\n    }\n  }]\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return {\n    zIndex: (theme.vars || theme).zIndex.modal,\n    variants: [{\n      props: {\n        disablePortal: true\n      },\n      style: {\n        position: 'absolute'\n      }\n    }]\n  };\n});\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(_ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return _extends({}, theme.typography.body1, {\n    overflow: 'auto'\n  });\n});\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(_ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return {\n    color: (theme.vars || theme).palette.text.secondary,\n    padding: '14px 16px'\n  };\n});\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(_ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return {\n    color: (theme.vars || theme).palette.text.secondary,\n    padding: '14px 16px'\n  };\n});\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(_ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return {\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0',\n    maxHeight: '40vh',\n    overflow: 'auto',\n    position: 'relative',\n    [`& .${autocompleteClasses.option}`]: {\n      minHeight: 48,\n      display: 'flex',\n      overflow: 'hidden',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 'auto'\n      },\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: (theme.vars || theme).palette.action.hover,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&[aria-disabled=\"true\"]': {\n        opacity: (theme.vars || theme).palette.action.disabledOpacity,\n        pointerEvents: 'none'\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: (theme.vars || theme).palette.action.focus\n      },\n      '&[aria-selected=\"true\"]': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n        [`&.${autocompleteClasses.focused}`]: {\n          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: (theme.vars || theme).palette.action.selected\n          }\n        },\n        [`&.${autocompleteClasses.focusVisible}`]: {\n          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n        }\n      }\n    }\n  };\n});\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(_ref7 => {\n  let {\n    theme\n  } = _ref7;\n  return {\n    backgroundColor: (theme.vars || theme).palette.background.paper,\n    top: -8\n  };\n});\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    className,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"small\"\n    })),\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    componentsProps = {},\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel: getOptionLabelProp,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    readOnly = false,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium',\n    slotProps = {}\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    ref: externalListboxRef\n  } = ListboxProps != null ? ListboxProps : {};\n\n  const _getListboxProps = getListboxProps(),\n        {\n    ref: listboxRef\n  } = _getListboxProps,\n        otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded2);\n\n  const combinedListboxRef = useForkRef(listboxRef, externalListboxRef);\n\n  const defaultGetOptionLabel = option => {\n    var _option$label;\n\n    return (_option$label = option.label) != null ? _option$label : option;\n  };\n\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel; // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    getOptionLabel,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: classes.tag,\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => {\n    // Need to clearly apply key because of https://github.com/vercel/next.js/issues/55642\n    return /*#__PURE__*/_createElement(\"li\", _extends({}, props2, {\n      key: props2.key\n    }), getOptionLabel(option));\n  };\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    }, ownerState);\n  };\n\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\n\n  const renderAutocompletePopperChildren = children => /*#__PURE__*/_jsx(AutocompletePopper, _extends({\n    as: PopperComponent,\n    disablePortal: disablePortal,\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    ownerState: ownerState,\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: popupOpen\n  }, popperSlotProps, {\n    className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\n    children: /*#__PURE__*/_jsx(AutocompletePaper, _extends({\n      ownerState: ownerState,\n      as: PaperComponent\n    }, paperSlotProps, {\n      className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\n      children: children\n    }))\n  }));\n\n  let autocompletePopper = null;\n\n  if (!loading && groupedOptions.length > 0) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n      as: ListboxComponent,\n      className: classes.listbox,\n      ownerState: ownerState\n    }, otherListboxProps, ListboxProps, {\n      ref: combinedListboxRef,\n      children: groupedOptions.map((option, index) => {\n        if (groupBy) {\n          return renderGroup({\n            key: option.key,\n            group: option.group,\n            children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n          });\n        }\n\n        return renderListOption(option, index);\n      })\n    })));\n  } else if (loading && groupedOptions.length === 0) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteLoading, {\n      className: classes.loading,\n      ownerState: ownerState,\n      children: loadingText\n    }));\n  } else if (groupedOptions.length === 0 && !freeSolo && !loading) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n      className: classes.noOptions,\n      ownerState: ownerState,\n      role: \"presentation\",\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      },\n      children: noOptionsText\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: _extends({\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onClick: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          }\n        }, (hasClearIcon || hasPopupIcon) && {\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, clearIndicatorSlotProps, {\n              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              ownerState: ownerState\n            }, popupIndicatorSlotProps, {\n              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\n              children: popupIcon\n            })) : null]\n          })\n        }),\n        inputProps: _extends({\n          className: classes.input,\n          disabled,\n          readOnly\n        }, getInputProps())\n      })\n    })), anchorEl ? autocompletePopper : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {Value} option The option to render.\n   * @param {object} state The state of each option.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {Value[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","map":{"version":3,"sources":["C:/Users/daksh/Desktop/Booking/admin/node_modules/@mui/material/Autocomplete/Autocomplete.js"],"names":["_objectWithoutPropertiesLoose","_extends","_ClearIcon","_ArrowDropDownIcon","_excluded","_excluded2","React","PropTypes","clsx","integerPropType","chainPropTypes","useAutocomplete","createFilterOptions","composeClasses","alpha","Popper","ListSubheader","Paper","IconButton","Chip","inputClasses","inputBaseClasses","outlinedInputClasses","filledInputClasses","ClearIcon","ArrowDropDownIcon","styled","createUseThemeProps","autocompleteClasses","getAutocompleteUtilityClass","capitalize","useForkRef","jsx","_jsx","jsxs","_jsxs","createElement","_createElement","useThemeProps","useUtilityClasses","ownerState","classes","disablePortal","expanded","focused","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","popupOpen","size","slots","root","inputRoot","input","tag","endAdornment","clearIndicator","popupIndicator","popper","paper","listbox","loading","noOptions","option","groupLabel","groupUl","AutocompleteRoot","name","slot","overridesResolver","props","styles","visibility","margin","maxWidth","flexWrap","paddingRight","width","minWidth","paddingBottom","padding","sizeSmall","right","paddingTop","paddingLeft","hiddenLabel","flexGrow","textOverflow","opacity","variants","style","AutocompleteEndAdornment","position","top","transform","AutocompleteClearIndicator","marginRight","AutocompletePopupIndicator","popupIndicatorOpen","AutocompletePopper","popperDisablePortal","theme","zIndex","vars","modal","AutocompletePaper","typography","body1","overflow","AutocompleteLoading","color","palette","text","secondary","AutocompleteNoOptions","AutocompleteListbox","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","primary","mainChannel","selectedOpacity","main","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","background","AutocompleteGroupUl","Autocomplete","forwardRef","inProps","ref","_slotProps$clearIndic","_slotProps$paper","_slotProps$popper","_slotProps$popupIndic","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","className","clearIcon","fontSize","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionLabel","getOptionLabelProp","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","popupIcon","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","slotProps","other","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","value","dirty","id","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","componentName","onMouseDown","handleInputMouseDown","externalListboxRef","_getListboxProps","listboxRef","otherListboxProps","combinedListboxRef","defaultGetOptionLabel","_option$label","label","startAdornment","length","getCustomizedTagProps","params","map","index","Array","isArray","splice","push","children","defaultRenderGroup","component","group","key","defaultRenderOption","props2","renderListOption","optionProps","clearIndicatorSlotProps","paperSlotProps","popperSlotProps","popupIndicatorSlotProps","renderAutocompletePopperChildren","as","clientWidth","role","open","autocompletePopper","options","option2","index2","event","preventDefault","Fragment","undefined","InputLabelProps","InputProps","onClick","target","currentTarget","title","inputProps","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","shape","any","Error","join","filterOptions","func","getOptionDisabled","getOptionKey","isOptionEqualToValue","elementType","onChange","onClose","onHighlightChange","onInputChange","onKeyDown","onOpen","array","isRequired","sx","arrayOf"],"mappings":"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","sourcesContent":["'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _ClearIcon, _ArrowDropDownIcon;\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionKey\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"slotProps\", \"value\"],\n  _excluded2 = [\"ref\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport integerPropType from '@mui/utils/integerPropType';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport { useAutocomplete, createFilterOptions } from '@mui/base';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport { styled, createUseThemeProps } from '../zero-styled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport useForkRef from '../utils/useForkRef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst useThemeProps = createUseThemeProps('MuiAutocomplete');\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  [`& .${autocompleteClasses.tag}`]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      [`& .${autocompleteClasses.tag}`]: {\n        margin: 2,\n        maxWidth: 'calc(100% - 4px)'\n      }\n    }\n  }, {\n    props: {\n      inputFocused: true\n    },\n    style: {\n      [`& .${autocompleteClasses.input}`]: {\n        opacity: 1\n      }\n    }\n  }]\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: '50%',\n  transform: 'translate(0, -50%)'\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    ownerState\n  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)\n})({\n  padding: 2,\n  marginRight: -2,\n  variants: [{\n    props: {\n      popupOpen: true\n    },\n    style: {\n      transform: 'rotate(180deg)'\n    }\n  }]\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(({\n  theme\n}) => ({\n  zIndex: (theme.vars || theme).zIndex.modal,\n  variants: [{\n    props: {\n      disablePortal: true\n    },\n    style: {\n      position: 'absolute'\n    }\n  }]\n}));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto'\n}));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n      autoComplete = false,\n      autoHighlight = false,\n      autoSelect = false,\n      blurOnSelect = false,\n      ChipProps,\n      className,\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n        fontSize: \"small\"\n      })),\n      clearOnBlur = !props.freeSolo,\n      clearOnEscape = false,\n      clearText = 'Clear',\n      closeText = 'Close',\n      componentsProps = {},\n      defaultValue = props.multiple ? [] : null,\n      disableClearable = false,\n      disableCloseOnSelect = false,\n      disabled = false,\n      disabledItemsFocusable = false,\n      disableListWrap = false,\n      disablePortal = false,\n      filterSelectedOptions = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      fullWidth = false,\n      getLimitTagsText = more => `+${more}`,\n      getOptionLabel: getOptionLabelProp,\n      groupBy,\n      handleHomeEndKeys = !props.freeSolo,\n      includeInputInList = false,\n      limitTags = -1,\n      ListboxComponent = 'ul',\n      ListboxProps,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      noOptionsText = 'No options',\n      openOnFocus = false,\n      openText = 'Open',\n      PaperComponent = Paper,\n      PopperComponent = Popper,\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n      readOnly = false,\n      renderGroup: renderGroupProp,\n      renderInput,\n      renderOption: renderOptionProp,\n      renderTags,\n      selectOnFocus = !props.freeSolo,\n      size = 'medium',\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    ref: externalListboxRef\n  } = ListboxProps != null ? ListboxProps : {};\n  const _getListboxProps = getListboxProps(),\n    {\n      ref: listboxRef\n    } = _getListboxProps,\n    otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded2);\n  const combinedListboxRef = useForkRef(listboxRef, externalListboxRef);\n  const defaultGetOptionLabel = option => {\n    var _option$label;\n    return (_option$label = option.label) != null ? _option$label : option;\n  };\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    getOptionLabel,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: classes.tag,\n      disabled\n    }, getTagProps(params));\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => {\n    // Need to clearly apply key because of https://github.com/vercel/next.js/issues/55642\n    return /*#__PURE__*/_createElement(\"li\", _extends({}, props2, {\n      key: props2.key\n    }), getOptionLabel(option));\n  };\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    }, ownerState);\n  };\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\n  const renderAutocompletePopperChildren = children => /*#__PURE__*/_jsx(AutocompletePopper, _extends({\n    as: PopperComponent,\n    disablePortal: disablePortal,\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    ownerState: ownerState,\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: popupOpen\n  }, popperSlotProps, {\n    className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\n    children: /*#__PURE__*/_jsx(AutocompletePaper, _extends({\n      ownerState: ownerState,\n      as: PaperComponent\n    }, paperSlotProps, {\n      className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\n      children: children\n    }))\n  }));\n  let autocompletePopper = null;\n  if (!loading && groupedOptions.length > 0) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n      as: ListboxComponent,\n      className: classes.listbox,\n      ownerState: ownerState\n    }, otherListboxProps, ListboxProps, {\n      ref: combinedListboxRef,\n      children: groupedOptions.map((option, index) => {\n        if (groupBy) {\n          return renderGroup({\n            key: option.key,\n            group: option.group,\n            children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n          });\n        }\n        return renderListOption(option, index);\n      })\n    })));\n  } else if (loading && groupedOptions.length === 0) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteLoading, {\n      className: classes.loading,\n      ownerState: ownerState,\n      children: loadingText\n    }));\n  } else if (groupedOptions.length === 0 && !freeSolo && !loading) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n      className: classes.noOptions,\n      ownerState: ownerState,\n      role: \"presentation\",\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      },\n      children: noOptionsText\n    }));\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: _extends({\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onClick: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          }\n        }, (hasClearIcon || hasPopupIcon) && {\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, clearIndicatorSlotProps, {\n              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              ownerState: ownerState\n            }, popupIndicatorSlotProps, {\n              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\n              children: popupIcon\n            })) : null]\n          })\n        }),\n        inputProps: _extends({\n          className: classes.input,\n          disabled,\n          readOnly\n        }, getInputProps())\n      })\n    })), anchorEl ? autocompletePopper : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {Value} option The option to render.\n   * @param {object} state The state of each option.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {Value[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}