{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\n\nimport React, { createContext, useContext } from 'react';\nimport invariant from 'tiny-invariant';\nimport find from 'lodash/find';\nimport every from 'lodash/every';\nimport { calculateViewBox } from '../util/calculateViewBox';\nimport { getAnyElementOfObject } from '../util/DataUtils';\nexport var XAxisContext = /*#__PURE__*/createContext(undefined);\nexport var YAxisContext = /*#__PURE__*/createContext(undefined);\nexport var ViewBoxContext = /*#__PURE__*/createContext(undefined);\nexport var OffsetContext = /*#__PURE__*/createContext({});\nexport var ClipPathIdContext = /*#__PURE__*/createContext(undefined);\nexport var ChartHeightContext = /*#__PURE__*/createContext(0);\nexport var ChartWidthContext = /*#__PURE__*/createContext(0);\n/**\n * Will add all the properties required to render all individual Recharts components into a React Context.\n *\n * If you want to read these properties, see the collection of hooks exported from this file.\n *\n * @param {object} props CategoricalChartState, plus children\n * @returns {ReactElement} React Context Provider\n */\n\nexport var ChartLayoutContextProvider = function ChartLayoutContextProvider(props) {\n  var _props$state = props.state,\n      xAxisMap = _props$state.xAxisMap,\n      yAxisMap = _props$state.yAxisMap,\n      offset = _props$state.offset,\n      clipPathId = props.clipPathId,\n      children = props.children,\n      width = props.width,\n      height = props.height;\n  /**\n   * Perhaps we should compute this property when reading? Let's see what is more often used\n   */\n\n  var viewBox = calculateViewBox(offset);\n  /*\n   * This pretends to be a single context but actually is split into multiple smaller ones.\n   * Why?\n   * Because one React Context only allows to set one value.\n   * But we need to set multiple values.\n   * If we do that with one context, then we force re-render on components that might not even be interested\n   * in the part of the state that has changed.\n   *\n   * By splitting into smaller contexts, we allow each components to be optimized and only re-render when its dependencies change.\n   *\n   * To actually achieve the optimal re-render, it is necessary to use React.memo().\n   * See the test file for details.\n   */\n\n  return /*#__PURE__*/React.createElement(XAxisContext.Provider, {\n    value: xAxisMap\n  }, /*#__PURE__*/React.createElement(YAxisContext.Provider, {\n    value: yAxisMap\n  }, /*#__PURE__*/React.createElement(OffsetContext.Provider, {\n    value: offset\n  }, /*#__PURE__*/React.createElement(ViewBoxContext.Provider, {\n    value: viewBox\n  }, /*#__PURE__*/React.createElement(ClipPathIdContext.Provider, {\n    value: clipPathId\n  }, /*#__PURE__*/React.createElement(ChartHeightContext.Provider, {\n    value: height\n  }, /*#__PURE__*/React.createElement(ChartWidthContext.Provider, {\n    value: width\n  }, children)))))));\n};\nexport var useClipPathId = function useClipPathId() {\n  return useContext(ClipPathIdContext);\n};\n\nfunction getKeysForDebug(object) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return 'There are no available ids.';\n  }\n\n  return \"Available ids are: \".concat(keys, \".\");\n}\n/**\n * This either finds and returns Axis by the specified ID, or throws an exception if an axis with this ID does not exist.\n *\n * @param xAxisId identifier of the axis - it's either autogenerated ('0'), or passed via `id` prop as <XAxis id='foo' />\n * @returns axis configuration object\n * @throws Error if no axis with this ID exists\n */\n\n\nexport var useXAxisOrThrow = function useXAxisOrThrow(xAxisId) {\n  var xAxisMap = useContext(XAxisContext);\n  !(xAxisMap != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Could not find Recharts context; are you sure this is rendered inside a Recharts wrapper component?') : invariant(false) : void 0;\n  var xAxis = xAxisMap[xAxisId];\n  !(xAxis != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Could not find xAxis by id \\\"\".concat(xAxisId, \"\\\" [\").concat(_typeof(xAxisId), \"]. \").concat(getKeysForDebug(xAxisMap))) : invariant(false) : void 0;\n  return xAxis;\n};\n/**\n * This will find an arbitrary first XAxis. If there's exactly one it always returns that one\n * - but if there are multiple then it can return any of those.\n *\n * If you want specific XAxis out of multiple then prefer using useXAxisOrThrow\n *\n * @returns X axisOptions, or undefined - if there are no X axes\n */\n\nexport var useArbitraryXAxis = function useArbitraryXAxis() {\n  var xAxisMap = useContext(XAxisContext);\n  return getAnyElementOfObject(xAxisMap);\n};\n/**\n * This will find an arbitrary first YAxis. If there's exactly one it always returns that one\n * - but if there are multiple then it can return any of those.\n *\n * If you want specific YAxis out of multiple then prefer using useXAxisOrThrow\n *\n * @returns Y axisOptions, or undefined - if there are no Y axes\n */\n\nexport var useArbitraryYAxis = function useArbitraryYAxis() {\n  var yAxisMap = useContext(YAxisContext);\n  return getAnyElementOfObject(yAxisMap);\n};\n/**\n * This hooks will:\n * 1st attempt to find an YAxis that has all elements in its domain finite\n * If no such axis exists, it will return an arbitrary YAxis\n * if there are no Y axes then it returns undefined\n *\n * @returns Either Y axisOptions, or undefined if there are no Y axes\n */\n\nexport var useYAxisWithFiniteDomainOrRandom = function useYAxisWithFiniteDomainOrRandom() {\n  var yAxisMap = useContext(YAxisContext);\n  var yAxisWithFiniteDomain = find(yAxisMap, function (axis) {\n    return every(axis.domain, Number.isFinite);\n  });\n  return yAxisWithFiniteDomain || getAnyElementOfObject(yAxisMap);\n};\n/**\n * This either finds and returns Axis by the specified ID, or throws an exception if an axis with this ID does not exist.\n *\n * @param yAxisId identifier of the axis - it's either autogenerated ('0'), or passed via `id` prop as <YAxis id='foo' />\n * @returns axis configuration object\n * @throws Error if no axis with this ID exists\n */\n\nexport var useYAxisOrThrow = function useYAxisOrThrow(yAxisId) {\n  var yAxisMap = useContext(YAxisContext);\n  !(yAxisMap != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Could not find Recharts context; are you sure this is rendered inside a Recharts wrapper component?') : invariant(false) : void 0;\n  var yAxis = yAxisMap[yAxisId];\n  !(yAxis != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Could not find yAxis by id \\\"\".concat(yAxisId, \"\\\" [\").concat(_typeof(yAxisId), \"]. \").concat(getKeysForDebug(yAxisMap))) : invariant(false) : void 0;\n  return yAxis;\n};\nexport var useViewBox = function useViewBox() {\n  var viewBox = useContext(ViewBoxContext);\n  return viewBox;\n};\nexport var useOffset = function useOffset() {\n  return useContext(OffsetContext);\n};\nexport var useChartWidth = function useChartWidth() {\n  return useContext(ChartWidthContext);\n};\nexport var useChartHeight = function useChartHeight() {\n  return useContext(ChartHeightContext);\n};","map":{"version":3,"sources":["C:/Users/daksh/Desktop/Booking/admin/node_modules/recharts/es6/context/chartLayoutContext.js"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","React","createContext","useContext","invariant","find","every","calculateViewBox","getAnyElementOfObject","XAxisContext","undefined","YAxisContext","ViewBoxContext","OffsetContext","ClipPathIdContext","ChartHeightContext","ChartWidthContext","ChartLayoutContextProvider","props","_props$state","state","xAxisMap","yAxisMap","offset","clipPathId","children","width","height","viewBox","createElement","Provider","value","useClipPathId","getKeysForDebug","object","keys","Object","length","concat","useXAxisOrThrow","xAxisId","process","env","NODE_ENV","xAxis","useArbitraryXAxis","useArbitraryYAxis","useYAxisWithFiniteDomainOrRandom","yAxisWithFiniteDomain","axis","domain","Number","isFinite","useYAxisOrThrow","yAxisId","yAxis","useViewBox","useOffset","useChartWidth","useChartHeight"],"mappings":"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","sourcesContent":["function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nimport React, { createContext, useContext } from 'react';\nimport invariant from 'tiny-invariant';\nimport find from 'lodash/find';\nimport every from 'lodash/every';\nimport { calculateViewBox } from '../util/calculateViewBox';\nimport { getAnyElementOfObject } from '../util/DataUtils';\nexport var XAxisContext = /*#__PURE__*/createContext(undefined);\nexport var YAxisContext = /*#__PURE__*/createContext(undefined);\nexport var ViewBoxContext = /*#__PURE__*/createContext(undefined);\nexport var OffsetContext = /*#__PURE__*/createContext({});\nexport var ClipPathIdContext = /*#__PURE__*/createContext(undefined);\nexport var ChartHeightContext = /*#__PURE__*/createContext(0);\nexport var ChartWidthContext = /*#__PURE__*/createContext(0);\n\n/**\n * Will add all the properties required to render all individual Recharts components into a React Context.\n *\n * If you want to read these properties, see the collection of hooks exported from this file.\n *\n * @param {object} props CategoricalChartState, plus children\n * @returns {ReactElement} React Context Provider\n */\nexport var ChartLayoutContextProvider = function ChartLayoutContextProvider(props) {\n  var _props$state = props.state,\n    xAxisMap = _props$state.xAxisMap,\n    yAxisMap = _props$state.yAxisMap,\n    offset = _props$state.offset,\n    clipPathId = props.clipPathId,\n    children = props.children,\n    width = props.width,\n    height = props.height;\n\n  /**\n   * Perhaps we should compute this property when reading? Let's see what is more often used\n   */\n  var viewBox = calculateViewBox(offset);\n\n  /*\n   * This pretends to be a single context but actually is split into multiple smaller ones.\n   * Why?\n   * Because one React Context only allows to set one value.\n   * But we need to set multiple values.\n   * If we do that with one context, then we force re-render on components that might not even be interested\n   * in the part of the state that has changed.\n   *\n   * By splitting into smaller contexts, we allow each components to be optimized and only re-render when its dependencies change.\n   *\n   * To actually achieve the optimal re-render, it is necessary to use React.memo().\n   * See the test file for details.\n   */\n  return /*#__PURE__*/React.createElement(XAxisContext.Provider, {\n    value: xAxisMap\n  }, /*#__PURE__*/React.createElement(YAxisContext.Provider, {\n    value: yAxisMap\n  }, /*#__PURE__*/React.createElement(OffsetContext.Provider, {\n    value: offset\n  }, /*#__PURE__*/React.createElement(ViewBoxContext.Provider, {\n    value: viewBox\n  }, /*#__PURE__*/React.createElement(ClipPathIdContext.Provider, {\n    value: clipPathId\n  }, /*#__PURE__*/React.createElement(ChartHeightContext.Provider, {\n    value: height\n  }, /*#__PURE__*/React.createElement(ChartWidthContext.Provider, {\n    value: width\n  }, children)))))));\n};\nexport var useClipPathId = function useClipPathId() {\n  return useContext(ClipPathIdContext);\n};\nfunction getKeysForDebug(object) {\n  var keys = Object.keys(object);\n  if (keys.length === 0) {\n    return 'There are no available ids.';\n  }\n  return \"Available ids are: \".concat(keys, \".\");\n}\n\n/**\n * This either finds and returns Axis by the specified ID, or throws an exception if an axis with this ID does not exist.\n *\n * @param xAxisId identifier of the axis - it's either autogenerated ('0'), or passed via `id` prop as <XAxis id='foo' />\n * @returns axis configuration object\n * @throws Error if no axis with this ID exists\n */\nexport var useXAxisOrThrow = function useXAxisOrThrow(xAxisId) {\n  var xAxisMap = useContext(XAxisContext);\n  !(xAxisMap != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Could not find Recharts context; are you sure this is rendered inside a Recharts wrapper component?') : invariant(false) : void 0;\n  var xAxis = xAxisMap[xAxisId];\n  !(xAxis != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Could not find xAxis by id \\\"\".concat(xAxisId, \"\\\" [\").concat(_typeof(xAxisId), \"]. \").concat(getKeysForDebug(xAxisMap))) : invariant(false) : void 0;\n  return xAxis;\n};\n\n/**\n * This will find an arbitrary first XAxis. If there's exactly one it always returns that one\n * - but if there are multiple then it can return any of those.\n *\n * If you want specific XAxis out of multiple then prefer using useXAxisOrThrow\n *\n * @returns X axisOptions, or undefined - if there are no X axes\n */\nexport var useArbitraryXAxis = function useArbitraryXAxis() {\n  var xAxisMap = useContext(XAxisContext);\n  return getAnyElementOfObject(xAxisMap);\n};\n\n/**\n * This will find an arbitrary first YAxis. If there's exactly one it always returns that one\n * - but if there are multiple then it can return any of those.\n *\n * If you want specific YAxis out of multiple then prefer using useXAxisOrThrow\n *\n * @returns Y axisOptions, or undefined - if there are no Y axes\n */\nexport var useArbitraryYAxis = function useArbitraryYAxis() {\n  var yAxisMap = useContext(YAxisContext);\n  return getAnyElementOfObject(yAxisMap);\n};\n\n/**\n * This hooks will:\n * 1st attempt to find an YAxis that has all elements in its domain finite\n * If no such axis exists, it will return an arbitrary YAxis\n * if there are no Y axes then it returns undefined\n *\n * @returns Either Y axisOptions, or undefined if there are no Y axes\n */\nexport var useYAxisWithFiniteDomainOrRandom = function useYAxisWithFiniteDomainOrRandom() {\n  var yAxisMap = useContext(YAxisContext);\n  var yAxisWithFiniteDomain = find(yAxisMap, function (axis) {\n    return every(axis.domain, Number.isFinite);\n  });\n  return yAxisWithFiniteDomain || getAnyElementOfObject(yAxisMap);\n};\n\n/**\n * This either finds and returns Axis by the specified ID, or throws an exception if an axis with this ID does not exist.\n *\n * @param yAxisId identifier of the axis - it's either autogenerated ('0'), or passed via `id` prop as <YAxis id='foo' />\n * @returns axis configuration object\n * @throws Error if no axis with this ID exists\n */\nexport var useYAxisOrThrow = function useYAxisOrThrow(yAxisId) {\n  var yAxisMap = useContext(YAxisContext);\n  !(yAxisMap != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Could not find Recharts context; are you sure this is rendered inside a Recharts wrapper component?') : invariant(false) : void 0;\n  var yAxis = yAxisMap[yAxisId];\n  !(yAxis != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Could not find yAxis by id \\\"\".concat(yAxisId, \"\\\" [\").concat(_typeof(yAxisId), \"]. \").concat(getKeysForDebug(yAxisMap))) : invariant(false) : void 0;\n  return yAxis;\n};\nexport var useViewBox = function useViewBox() {\n  var viewBox = useContext(ViewBoxContext);\n  return viewBox;\n};\nexport var useOffset = function useOffset() {\n  return useContext(OffsetContext);\n};\nexport var useChartWidth = function useChartWidth() {\n  return useContext(ChartWidthContext);\n};\nexport var useChartHeight = function useChartHeight() {\n  return useContext(ChartHeightContext);\n};"]},"metadata":{},"sourceType":"module"}